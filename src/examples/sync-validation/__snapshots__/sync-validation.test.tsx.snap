// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SyncValidation /> render sync validation form 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Connect(ReduxForm)
    onSubmit={[Function]}
  >
    <ReduxForm
      actions={
        Object {
          "arrayPush": [Function],
          "blur": [Function],
          "change": [Function],
          "changeSubmitted": [Function],
          "focus": [Function],
          "registerField": [Function],
          "registerForm": [Function],
          "removeField": [Function],
          "removeForm": [Function],
          "updateFormState": [Function],
          "updateValidateAndWarningMessages": [Function],
          "updateValidateMessage": [Function],
          "updateValidateMessages": [Function],
          "updateWarningMessage": [Function],
          "updateWarningMessages": [Function],
        }
      }
      formState={
        Object {
          "form": Object {
            "activeField": "",
            "blurred": false,
            "changed": false,
            "errorsMap": Object {},
            "focused": false,
            "hasErrors": false,
            "hasWarnings": false,
            "submitted": false,
            "warningsMap": Object {},
          },
          "meta": Object {
            "firstName": Object {
              "active": false,
              "blurred": false,
              "changed": false,
              "error": "",
              "focused": false,
              "warning": "",
            },
            "lastName": Object {
              "active": false,
              "blurred": false,
              "changed": false,
              "error": "",
              "focused": false,
              "warning": "",
            },
          },
          "values": Object {
            "firstName": undefined,
            "lastName": undefined,
          },
        }
      }
      ownProps={
        Object {
          "onSubmit": [Function],
        }
      }
    >
      <ReduxFormClass
        actions={
          Object {
            "arrayPush": [Function],
            "blur": [Function],
            "change": [Function],
            "changeSubmitted": [Function],
            "focus": [Function],
            "registerField": [Function],
            "registerForm": [Function],
            "removeField": [Function],
            "removeForm": [Function],
            "updateFormState": [Function],
            "updateValidateAndWarningMessages": [Function],
            "updateValidateMessage": [Function],
            "updateValidateMessages": [Function],
            "updateWarningMessage": [Function],
            "updateWarningMessages": [Function],
          }
        }
        formState={
          Object {
            "form": Object {
              "activeField": "",
              "blurred": false,
              "changed": false,
              "errorsMap": Object {},
              "focused": false,
              "hasErrors": false,
              "hasWarnings": false,
              "submitted": false,
              "warningsMap": Object {},
            },
            "meta": Object {
              "firstName": Object {
                "active": false,
                "blurred": false,
                "changed": false,
                "error": "",
                "focused": false,
                "warning": "",
              },
              "lastName": Object {
                "active": false,
                "blurred": false,
                "changed": false,
                "error": "",
                "focused": false,
                "warning": "",
              },
            },
            "values": Object {
              "firstName": undefined,
              "lastName": undefined,
            },
          }
        }
        ownProps={
          Object {
            "onSubmit": [Function],
          }
        }
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
      >
        <InnerSyncValidation
          formActions={
            Object {
              "arrayPush": [Function],
              "blur": [Function],
              "change": [Function],
              "changeSubmitted": [Function],
              "focus": [Function],
              "registerField": [Function],
              "registerForm": [Function],
              "removeField": [Function],
              "removeForm": [Function],
              "updateFormState": [Function],
              "updateValidateAndWarningMessages": [Function],
              "updateValidateMessage": [Function],
              "updateValidateMessages": [Function],
              "updateWarningMessage": [Function],
              "updateWarningMessages": [Function],
            }
          }
          formParams={
            Object {
              "destroyOnUnmount": true,
              "form": "example",
            }
          }
          formState={
            Object {
              "form": Object {
                "activeField": "",
                "blurred": false,
                "changed": false,
                "errorsMap": Object {},
                "focused": false,
                "hasErrors": false,
                "hasWarnings": false,
                "submitted": false,
                "warningsMap": Object {},
              },
              "meta": Object {
                "firstName": Object {
                  "active": false,
                  "blurred": false,
                  "changed": false,
                  "error": "",
                  "focused": false,
                  "warning": "",
                },
                "lastName": Object {
                  "active": false,
                  "blurred": false,
                  "changed": false,
                  "error": "",
                  "focused": false,
                  "warning": "",
                },
              },
              "values": Object {
                "firstName": undefined,
                "lastName": undefined,
              },
            }
          }
          handleSubmit={[Function]}
        >
          <form
            onSubmit={[Function]}
          >
            <div>
              <label>
                First Name
              </label>
              <div>
                <FieldWithContext
                  component="input"
                  name="firstName"
                  placeholder="First Name"
                  type="text"
                >
                  <Connect(Field)
                    component="input"
                    formContext={
                      Object {
                        "destroyOnUnmount": true,
                        "form": "example",
                        "updateValidateAndWarnMap": [Function],
                        "validate": [Function],
                        "warn": [Function],
                      }
                    }
                    name="firstName"
                    placeholder="First Name"
                    type="text"
                  >
                    <Field
                      actions={
                        Object {
                          "arrayPush": [Function],
                          "blur": [Function],
                          "change": [Function],
                          "changeSubmitted": [Function],
                          "focus": [Function],
                          "registerField": [Function],
                          "registerForm": [Function],
                          "removeField": [Function],
                          "removeForm": [Function],
                          "updateFormState": [Function],
                          "updateValidateAndWarningMessages": [Function],
                          "updateValidateMessage": [Function],
                          "updateValidateMessages": [Function],
                          "updateWarningMessage": [Function],
                          "updateWarningMessages": [Function],
                        }
                      }
                      component="input"
                      fieldArrayContext={Object {}}
                      formContext={
                        Object {
                          "destroyOnUnmount": true,
                          "form": "example",
                          "updateValidateAndWarnMap": [Function],
                          "validate": [Function],
                          "warn": [Function],
                        }
                      }
                      formState={
                        Object {
                          "form": Object {
                            "activeField": "",
                            "blurred": false,
                            "changed": false,
                            "errorsMap": Object {},
                            "focused": false,
                            "hasErrors": false,
                            "hasWarnings": false,
                            "submitted": false,
                            "warningsMap": Object {},
                          },
                          "meta": Object {
                            "firstName": Object {
                              "active": false,
                              "blurred": false,
                              "changed": false,
                              "error": "",
                              "focused": false,
                              "warning": "",
                            },
                            "lastName": Object {
                              "active": false,
                              "blurred": false,
                              "changed": false,
                              "error": "",
                              "focused": false,
                              "warning": "",
                            },
                          },
                          "values": Object {
                            "firstName": undefined,
                            "lastName": undefined,
                          },
                        }
                      }
                      name="firstName"
                      ownProps={
                        Object {
                          "name": "firstName",
                          "placeholder": "First Name",
                          "type": "text",
                        }
                      }
                    >
                      <input
                        name="firstName"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        placeholder="First Name"
                        type="text"
                        value=""
                      />
                    </Field>
                  </Connect(Field)>
                </FieldWithContext>
              </div>
            </div>
            <div>
              <label>
                Last Name
              </label>
              <div>
                <FieldWithContext
                  component="input"
                  name="lastName"
                  placeholder="Last Name"
                  type="text"
                >
                  <Connect(Field)
                    component="input"
                    formContext={
                      Object {
                        "destroyOnUnmount": true,
                        "form": "example",
                        "updateValidateAndWarnMap": [Function],
                        "validate": [Function],
                        "warn": [Function],
                      }
                    }
                    name="lastName"
                    placeholder="Last Name"
                    type="text"
                  >
                    <Field
                      actions={
                        Object {
                          "arrayPush": [Function],
                          "blur": [Function],
                          "change": [Function],
                          "changeSubmitted": [Function],
                          "focus": [Function],
                          "registerField": [Function],
                          "registerForm": [Function],
                          "removeField": [Function],
                          "removeForm": [Function],
                          "updateFormState": [Function],
                          "updateValidateAndWarningMessages": [Function],
                          "updateValidateMessage": [Function],
                          "updateValidateMessages": [Function],
                          "updateWarningMessage": [Function],
                          "updateWarningMessages": [Function],
                        }
                      }
                      component="input"
                      fieldArrayContext={Object {}}
                      formContext={
                        Object {
                          "destroyOnUnmount": true,
                          "form": "example",
                          "updateValidateAndWarnMap": [Function],
                          "validate": [Function],
                          "warn": [Function],
                        }
                      }
                      formState={
                        Object {
                          "form": Object {
                            "activeField": "",
                            "blurred": false,
                            "changed": false,
                            "errorsMap": Object {},
                            "focused": false,
                            "hasErrors": false,
                            "hasWarnings": false,
                            "submitted": false,
                            "warningsMap": Object {},
                          },
                          "meta": Object {
                            "firstName": Object {
                              "active": false,
                              "blurred": false,
                              "changed": false,
                              "error": "",
                              "focused": false,
                              "warning": "",
                            },
                            "lastName": Object {
                              "active": false,
                              "blurred": false,
                              "changed": false,
                              "error": "",
                              "focused": false,
                              "warning": "",
                            },
                          },
                          "values": Object {
                            "firstName": undefined,
                            "lastName": undefined,
                          },
                        }
                      }
                      name="lastName"
                      ownProps={
                        Object {
                          "name": "lastName",
                          "placeholder": "Last Name",
                          "type": "text",
                        }
                      }
                    >
                      <input
                        name="lastName"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        placeholder="Last Name"
                        type="text"
                        value=""
                      />
                    </Field>
                  </Connect(Field)>
                </FieldWithContext>
              </div>
            </div>
            <div>
              <button
                type="submit"
              >
                Submit
              </button>
            </div>
          </form>
        </InnerSyncValidation>
      </ReduxFormClass>
    </ReduxForm>
  </Connect(ReduxForm)>
</Provider>
`;

exports[`<SyncValidation /> validate 1`] = `
Object {
  "form": Object {
    "activeField": "",
    "blurred": false,
    "changed": true,
    "errorsMap": Object {
      "lastName": "Field required.",
    },
    "focused": false,
    "hasErrors": true,
    "hasWarnings": false,
    "submitted": true,
    "warningsMap": Object {},
  },
  "meta": Object {
    "firstName": Object {
      "active": false,
      "blurred": false,
      "changed": true,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "lastName": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "Field required.",
      "focused": false,
      "warning": "",
    },
  },
  "values": Object {
    "firstName": "test",
    "lastName": undefined,
  },
}
`;

exports[`<SyncValidation /> validate only change 1`] = `
Object {
  "form": Object {
    "activeField": "",
    "blurred": false,
    "changed": true,
    "errorsMap": Object {
      "lastName": "Field required.",
    },
    "focused": false,
    "hasErrors": true,
    "hasWarnings": false,
    "submitted": false,
    "warningsMap": Object {},
  },
  "meta": Object {
    "firstName": Object {
      "active": false,
      "blurred": false,
      "changed": true,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "lastName": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "Field required.",
      "focused": false,
      "warning": "",
    },
  },
  "values": Object {
    "firstName": "test",
    "lastName": undefined,
  },
}
`;

exports[`<SyncValidation /> validate: onSubmit after failed and success 1`] = `
Object {
  "form": Object {
    "activeField": "",
    "blurred": false,
    "changed": true,
    "errorsMap": Object {},
    "focused": false,
    "hasErrors": false,
    "hasWarnings": false,
    "submitted": true,
    "warningsMap": Object {},
  },
  "meta": Object {
    "firstName": Object {
      "active": false,
      "blurred": false,
      "changed": true,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "lastName": Object {
      "active": false,
      "blurred": false,
      "changed": true,
      "error": "",
      "focused": false,
      "warning": "",
    },
  },
  "values": Object {
    "firstName": "test",
    "lastName": "test",
  },
}
`;

exports[`<SyncValidation /> validate: onSubmit after failed submit 1`] = `
Object {
  "form": Object {
    "activeField": "",
    "blurred": false,
    "changed": true,
    "errorsMap": Object {
      "lastName": "Field required.",
    },
    "focused": false,
    "hasErrors": true,
    "hasWarnings": false,
    "submitted": true,
    "warningsMap": Object {},
  },
  "meta": Object {
    "firstName": Object {
      "active": false,
      "blurred": false,
      "changed": true,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "lastName": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "Field required.",
      "focused": false,
      "warning": "",
    },
  },
  "values": Object {
    "firstName": "test",
    "lastName": undefined,
  },
}
`;

exports[`<SyncValidation /> warn 1`] = `
Object {
  "form": Object {
    "activeField": "",
    "blurred": false,
    "changed": true,
    "errorsMap": Object {},
    "focused": false,
    "hasErrors": false,
    "hasWarnings": true,
    "submitted": true,
    "warningsMap": Object {
      "firstName": "The minimum length of the value must be 2.",
    },
  },
  "meta": Object {
    "firstName": Object {
      "active": false,
      "blurred": false,
      "changed": true,
      "error": "",
      "focused": false,
      "warning": "The minimum length of the value must be 2.",
    },
    "lastName": Object {
      "active": false,
      "blurred": false,
      "changed": true,
      "error": "",
      "focused": false,
      "warning": "",
    },
  },
  "values": Object {
    "firstName": "t",
    "lastName": "test",
  },
}
`;

exports[`<SyncValidation /> warn only change 1`] = `
Object {
  "form": Object {
    "activeField": "",
    "blurred": false,
    "changed": true,
    "errorsMap": Object {},
    "focused": false,
    "hasErrors": false,
    "hasWarnings": true,
    "submitted": false,
    "warningsMap": Object {
      "firstName": "The minimum length of the value must be 2.",
    },
  },
  "meta": Object {
    "firstName": Object {
      "active": false,
      "blurred": false,
      "changed": true,
      "error": "",
      "focused": false,
      "warning": "The minimum length of the value must be 2.",
    },
    "lastName": Object {
      "active": false,
      "blurred": false,
      "changed": true,
      "error": "",
      "focused": false,
      "warning": "",
    },
  },
  "values": Object {
    "firstName": "t",
    "lastName": "test",
  },
}
`;

exports[`<SyncValidation /> warn: onSubmit after failed and success 1`] = `
Object {
  "form": Object {
    "activeField": "",
    "blurred": false,
    "changed": true,
    "errorsMap": Object {},
    "focused": false,
    "hasErrors": false,
    "hasWarnings": false,
    "submitted": true,
    "warningsMap": Object {},
  },
  "meta": Object {
    "firstName": Object {
      "active": false,
      "blurred": false,
      "changed": true,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "lastName": Object {
      "active": false,
      "blurred": false,
      "changed": true,
      "error": "",
      "focused": false,
      "warning": "",
    },
  },
  "values": Object {
    "firstName": "test",
    "lastName": "test",
  },
}
`;

exports[`<SyncValidation /> warn: onSubmit after failed submit 1`] = `
Object {
  "form": Object {
    "activeField": "",
    "blurred": false,
    "changed": true,
    "errorsMap": Object {},
    "focused": false,
    "hasErrors": false,
    "hasWarnings": true,
    "submitted": true,
    "warningsMap": Object {
      "firstName": "The minimum length of the value must be 2.",
    },
  },
  "meta": Object {
    "firstName": Object {
      "active": false,
      "blurred": false,
      "changed": true,
      "error": "",
      "focused": false,
      "warning": "The minimum length of the value must be 2.",
    },
    "lastName": Object {
      "active": false,
      "blurred": false,
      "changed": true,
      "error": "",
      "focused": false,
      "warning": "",
    },
  },
  "values": Object {
    "firstName": "t",
    "lastName": "test",
  },
}
`;
