// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SimpleForm /> Blur field: actions history 1`] = `
"@@react-redux-form-lite/BLUR
 meta: {form: 'simple', field: 'firstName'}"
`;

exports[`<SimpleForm /> Blur field: store 1`] = `
Object {
  "form": Object {
    "activeField": "",
    "blurred": true,
    "changed": true,
    "errorsMap": Object {},
    "focused": true,
    "hasErrors": false,
    "hasWarnings": false,
    "submitted": false,
    "warningsMap": Object {},
  },
  "meta": Object {
    "email": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "employed": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "favoriteColor": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "firstName": Object {
      "active": false,
      "blurred": true,
      "changed": true,
      "error": "",
      "focused": true,
      "warning": "",
    },
    "lastName": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "notes": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "sex": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
  },
  "values": Object {
    "email": undefined,
    "employed": undefined,
    "favoriteColor": undefined,
    "firstName": "test",
    "lastName": undefined,
    "notes": undefined,
    "sex": undefined,
  },
}
`;

exports[`<SimpleForm /> Change field: actions history. 1`] = `
"@@react-redux-form-lite/CHANGE
 meta: {form: 'simple', field: 'firstName'}
 payload: {value: 't'},
@@react-redux-form-lite/CHANGE
 meta: {form: 'simple', field: 'firstName'}
 payload: {value: 'te'},
@@react-redux-form-lite/CHANGE
 meta: {form: 'simple', field: 'firstName'}
 payload: {value: 'tes'},
@@react-redux-form-lite/CHANGE
 meta: {form: 'simple', field: 'firstName'}
 payload: {value: 'test'}"
`;

exports[`<SimpleForm /> Changed field: store 1`] = `
Object {
  "form": Object {
    "activeField": "firstName",
    "blurred": false,
    "changed": true,
    "errorsMap": Object {},
    "focused": true,
    "hasErrors": false,
    "hasWarnings": false,
    "submitted": false,
    "warningsMap": Object {},
  },
  "meta": Object {
    "email": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "employed": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "favoriteColor": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "firstName": Object {
      "active": true,
      "blurred": false,
      "changed": true,
      "error": "",
      "focused": true,
      "warning": "",
    },
    "lastName": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "notes": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "sex": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
  },
  "values": Object {
    "email": undefined,
    "employed": undefined,
    "favoriteColor": undefined,
    "firstName": "test",
    "lastName": undefined,
    "notes": undefined,
    "sex": undefined,
  },
}
`;

exports[`<SimpleForm /> Focus field: actions history. 1`] = `
Array [
  Object {
    "meta": Object {
      "field": "firstName",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/FOCUS",
  },
]
`;

exports[`<SimpleForm /> Focus field: store 1`] = `
Object {
  "form": Object {
    "activeField": "firstName",
    "blurred": false,
    "changed": false,
    "errorsMap": Object {},
    "focused": true,
    "hasErrors": false,
    "hasWarnings": false,
    "submitted": false,
    "warningsMap": Object {},
  },
  "meta": Object {
    "email": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "employed": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "favoriteColor": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "firstName": Object {
      "active": true,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": true,
      "warning": "",
    },
    "lastName": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "notes": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "sex": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
  },
  "values": Object {
    "email": undefined,
    "employed": undefined,
    "favoriteColor": undefined,
    "firstName": undefined,
    "lastName": undefined,
    "notes": undefined,
    "sex": undefined,
  },
}
`;

exports[`<SimpleForm /> Register form and fields: action history. 1`] = `
Array [
  Object {
    "meta": Object {
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FORM",
  },
  Object {
    "meta": Object {
      "field": "firstName",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FIELD",
  },
  Object {
    "meta": Object {
      "field": "lastName",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FIELD",
  },
  Object {
    "meta": Object {
      "field": "email",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FIELD",
  },
  Object {
    "meta": Object {
      "field": "sex",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FIELD",
  },
  Object {
    "meta": Object {
      "field": "sex",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FIELD",
  },
  Object {
    "meta": Object {
      "field": "favoriteColor",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FIELD",
  },
  Object {
    "meta": Object {
      "field": "employed",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FIELD",
  },
  Object {
    "meta": Object {
      "field": "notes",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FIELD",
  },
]
`;

exports[`<SimpleForm /> Register form and fields: store. 1`] = `
Object {
  "form": Object {
    "activeField": "",
    "blurred": false,
    "changed": false,
    "errorsMap": Object {},
    "focused": false,
    "hasErrors": false,
    "hasWarnings": false,
    "submitted": false,
    "warningsMap": Object {},
  },
  "meta": Object {
    "email": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "employed": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "favoriteColor": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "firstName": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "lastName": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "notes": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "sex": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
  },
  "values": Object {
    "email": undefined,
    "employed": undefined,
    "favoriteColor": undefined,
    "firstName": undefined,
    "lastName": undefined,
    "notes": undefined,
    "sex": undefined,
  },
}
`;

exports[`<SimpleForm /> Render simple form. 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <ConnectFunction>
    <ReduxForm
      actions={
        Object {
          "arrayPush": [Function],
          "blur": [Function],
          "change": [Function],
          "changeSubmitted": [Function],
          "focus": [Function],
          "registerField": [Function],
          "registerForm": [Function],
          "removeField": [Function],
          "updateErrorAndWarningMessages": [Function],
          "updateFormState": [Function],
          "updateValidateMessage": [Function],
          "updateValidateMessages": [Function],
          "updateWarningMessage": [Function],
          "updateWarningMessages": [Function],
        }
      }
      form={
        Object {
          "form": Object {
            "activeField": "",
            "blurred": false,
            "changed": false,
            "errorsMap": Object {},
            "focused": false,
            "hasErrors": false,
            "hasWarnings": false,
            "submitted": false,
            "warningsMap": Object {},
          },
          "meta": Object {
            "email": Object {
              "active": false,
              "blurred": false,
              "changed": false,
              "error": "",
              "focused": false,
              "warning": "",
            },
            "employed": Object {
              "active": false,
              "blurred": false,
              "changed": false,
              "error": "",
              "focused": false,
              "warning": "",
            },
            "favoriteColor": Object {
              "active": false,
              "blurred": false,
              "changed": false,
              "error": "",
              "focused": false,
              "warning": "",
            },
            "firstName": Object {
              "active": false,
              "blurred": false,
              "changed": false,
              "error": "",
              "focused": false,
              "warning": "",
            },
            "lastName": Object {
              "active": false,
              "blurred": false,
              "changed": false,
              "error": "",
              "focused": false,
              "warning": "",
            },
            "notes": Object {
              "active": false,
              "blurred": false,
              "changed": false,
              "error": "",
              "focused": false,
              "warning": "",
            },
            "sex": Object {
              "active": false,
              "blurred": false,
              "changed": false,
              "error": "",
              "focused": false,
              "warning": "",
            },
          },
          "values": Object {
            "email": undefined,
            "employed": undefined,
            "favoriteColor": undefined,
            "firstName": undefined,
            "lastName": undefined,
            "notes": undefined,
            "sex": undefined,
          },
        }
      }
      ownProps={Object {}}
    >
      <SimpleForm
        form={
          Object {
            "form": Object {
              "activeField": "",
              "blurred": false,
              "changed": false,
              "errorsMap": Object {},
              "focused": false,
              "hasErrors": false,
              "hasWarnings": false,
              "submitted": false,
              "warningsMap": Object {},
            },
            "meta": Object {
              "email": Object {
                "active": false,
                "blurred": false,
                "changed": false,
                "error": "",
                "focused": false,
                "warning": "",
              },
              "employed": Object {
                "active": false,
                "blurred": false,
                "changed": false,
                "error": "",
                "focused": false,
                "warning": "",
              },
              "favoriteColor": Object {
                "active": false,
                "blurred": false,
                "changed": false,
                "error": "",
                "focused": false,
                "warning": "",
              },
              "firstName": Object {
                "active": false,
                "blurred": false,
                "changed": false,
                "error": "",
                "focused": false,
                "warning": "",
              },
              "lastName": Object {
                "active": false,
                "blurred": false,
                "changed": false,
                "error": "",
                "focused": false,
                "warning": "",
              },
              "notes": Object {
                "active": false,
                "blurred": false,
                "changed": false,
                "error": "",
                "focused": false,
                "warning": "",
              },
              "sex": Object {
                "active": false,
                "blurred": false,
                "changed": false,
                "error": "",
                "focused": false,
                "warning": "",
              },
            },
            "values": Object {
              "email": undefined,
              "employed": undefined,
              "favoriteColor": undefined,
              "firstName": undefined,
              "lastName": undefined,
              "notes": undefined,
              "sex": undefined,
            },
          }
        }
        formActions={
          Object {
            "arrayPush": [Function],
            "blur": [Function],
            "change": [Function],
            "changeSubmitted": [Function],
            "focus": [Function],
            "registerField": [Function],
            "registerForm": [Function],
            "removeField": [Function],
            "updateErrorAndWarningMessages": [Function],
            "updateFormState": [Function],
            "updateValidateMessage": [Function],
            "updateValidateMessages": [Function],
            "updateWarningMessage": [Function],
            "updateWarningMessages": [Function],
          }
        }
        formParams={
          Object {
            "destroyOnUnmount": true,
            "form": "simple",
          }
        }
        handleSubmit={[Function]}
      >
        <form
          onSubmit={[Function]}
        >
          <div>
            <label>
              First Name
            </label>
            <div>
              <FieldWithContext
                component="input"
                name="firstName"
                placeholder="First Name"
                type="text"
              >
                <ConnectFunction
                  component="input"
                  formContext={
                    Object {
                      "destroyOnUnmount": true,
                      "form": "simple",
                      "updateValidateAndWarningMap": [Function],
                    }
                  }
                  name="firstName"
                  placeholder="First Name"
                  type="text"
                >
                  <Field
                    actions={
                      Object {
                        "arrayPush": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "changeSubmitted": [Function],
                        "focus": [Function],
                        "registerField": [Function],
                        "registerForm": [Function],
                        "removeField": [Function],
                        "updateErrorAndWarningMessages": [Function],
                        "updateFormState": [Function],
                        "updateValidateMessage": [Function],
                        "updateValidateMessages": [Function],
                        "updateWarningMessage": [Function],
                        "updateWarningMessages": [Function],
                      }
                    }
                    component="input"
                    fieldArrayContext={Object {}}
                    formContext={
                      Object {
                        "destroyOnUnmount": true,
                        "form": "simple",
                        "updateValidateAndWarningMap": [Function],
                      }
                    }
                    name="firstName"
                    placeholder="First Name"
                    type="text"
                  >
                    <input
                      name="firstName"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="First Name"
                      type="text"
                    />
                  </Field>
                </ConnectFunction>
              </FieldWithContext>
            </div>
          </div>
          <div>
            <label>
              Last Name
            </label>
            <div>
              <FieldWithContext
                component="input"
                name="lastName"
                placeholder="Last Name"
                type="text"
              >
                <ConnectFunction
                  component="input"
                  formContext={
                    Object {
                      "destroyOnUnmount": true,
                      "form": "simple",
                      "updateValidateAndWarningMap": [Function],
                    }
                  }
                  name="lastName"
                  placeholder="Last Name"
                  type="text"
                >
                  <Field
                    actions={
                      Object {
                        "arrayPush": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "changeSubmitted": [Function],
                        "focus": [Function],
                        "registerField": [Function],
                        "registerForm": [Function],
                        "removeField": [Function],
                        "updateErrorAndWarningMessages": [Function],
                        "updateFormState": [Function],
                        "updateValidateMessage": [Function],
                        "updateValidateMessages": [Function],
                        "updateWarningMessage": [Function],
                        "updateWarningMessages": [Function],
                      }
                    }
                    component="input"
                    fieldArrayContext={Object {}}
                    formContext={
                      Object {
                        "destroyOnUnmount": true,
                        "form": "simple",
                        "updateValidateAndWarningMap": [Function],
                      }
                    }
                    name="lastName"
                    placeholder="Last Name"
                    type="text"
                  >
                    <input
                      name="lastName"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Last Name"
                      type="text"
                    />
                  </Field>
                </ConnectFunction>
              </FieldWithContext>
            </div>
          </div>
          <div>
            <label>
              Email
            </label>
            <div>
              <FieldWithContext
                component="input"
                name="email"
                placeholder="Email"
                type="email"
              >
                <ConnectFunction
                  component="input"
                  formContext={
                    Object {
                      "destroyOnUnmount": true,
                      "form": "simple",
                      "updateValidateAndWarningMap": [Function],
                    }
                  }
                  name="email"
                  placeholder="Email"
                  type="email"
                >
                  <Field
                    actions={
                      Object {
                        "arrayPush": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "changeSubmitted": [Function],
                        "focus": [Function],
                        "registerField": [Function],
                        "registerForm": [Function],
                        "removeField": [Function],
                        "updateErrorAndWarningMessages": [Function],
                        "updateFormState": [Function],
                        "updateValidateMessage": [Function],
                        "updateValidateMessages": [Function],
                        "updateWarningMessage": [Function],
                        "updateWarningMessages": [Function],
                      }
                    }
                    component="input"
                    fieldArrayContext={Object {}}
                    formContext={
                      Object {
                        "destroyOnUnmount": true,
                        "form": "simple",
                        "updateValidateAndWarningMap": [Function],
                      }
                    }
                    name="email"
                    placeholder="Email"
                    type="email"
                  >
                    <input
                      name="email"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Email"
                      type="email"
                    />
                  </Field>
                </ConnectFunction>
              </FieldWithContext>
            </div>
          </div>
          <div>
            <label>
              Sex
            </label>
            <div>
              <label>
                <FieldWithContext
                  component="input"
                  name="sex"
                  type="radio"
                  value="male"
                >
                  <ConnectFunction
                    component="input"
                    formContext={
                      Object {
                        "destroyOnUnmount": true,
                        "form": "simple",
                        "updateValidateAndWarningMap": [Function],
                      }
                    }
                    name="sex"
                    type="radio"
                    value="male"
                  >
                    <Field
                      actions={
                        Object {
                          "arrayPush": [Function],
                          "blur": [Function],
                          "change": [Function],
                          "changeSubmitted": [Function],
                          "focus": [Function],
                          "registerField": [Function],
                          "registerForm": [Function],
                          "removeField": [Function],
                          "updateErrorAndWarningMessages": [Function],
                          "updateFormState": [Function],
                          "updateValidateMessage": [Function],
                          "updateValidateMessages": [Function],
                          "updateWarningMessage": [Function],
                          "updateWarningMessages": [Function],
                        }
                      }
                      component="input"
                      fieldArrayContext={Object {}}
                      formContext={
                        Object {
                          "destroyOnUnmount": true,
                          "form": "simple",
                          "updateValidateAndWarningMap": [Function],
                        }
                      }
                      name="sex"
                      type="radio"
                      value="male"
                    >
                      <input
                        name="sex"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        type="radio"
                        value="male"
                      />
                    </Field>
                  </ConnectFunction>
                </FieldWithContext>
                 Male
              </label>
              <label>
                <FieldWithContext
                  component="input"
                  name="sex"
                  type="radio"
                  value="female"
                >
                  <ConnectFunction
                    component="input"
                    formContext={
                      Object {
                        "destroyOnUnmount": true,
                        "form": "simple",
                        "updateValidateAndWarningMap": [Function],
                      }
                    }
                    name="sex"
                    type="radio"
                    value="female"
                  >
                    <Field
                      actions={
                        Object {
                          "arrayPush": [Function],
                          "blur": [Function],
                          "change": [Function],
                          "changeSubmitted": [Function],
                          "focus": [Function],
                          "registerField": [Function],
                          "registerForm": [Function],
                          "removeField": [Function],
                          "updateErrorAndWarningMessages": [Function],
                          "updateFormState": [Function],
                          "updateValidateMessage": [Function],
                          "updateValidateMessages": [Function],
                          "updateWarningMessage": [Function],
                          "updateWarningMessages": [Function],
                        }
                      }
                      component="input"
                      fieldArrayContext={Object {}}
                      formContext={
                        Object {
                          "destroyOnUnmount": true,
                          "form": "simple",
                          "updateValidateAndWarningMap": [Function],
                        }
                      }
                      name="sex"
                      type="radio"
                      value="female"
                    >
                      <input
                        name="sex"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        type="radio"
                        value="female"
                      />
                    </Field>
                  </ConnectFunction>
                </FieldWithContext>
                 Female
              </label>
            </div>
          </div>
          <div>
            <label>
              Favorite Color
            </label>
            <div>
              <FieldWithContext
                component="select"
                name="favoriteColor"
              >
                <ConnectFunction
                  component="select"
                  formContext={
                    Object {
                      "destroyOnUnmount": true,
                      "form": "simple",
                      "updateValidateAndWarningMap": [Function],
                    }
                  }
                  name="favoriteColor"
                >
                  <Field
                    actions={
                      Object {
                        "arrayPush": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "changeSubmitted": [Function],
                        "focus": [Function],
                        "registerField": [Function],
                        "registerForm": [Function],
                        "removeField": [Function],
                        "updateErrorAndWarningMessages": [Function],
                        "updateFormState": [Function],
                        "updateValidateMessage": [Function],
                        "updateValidateMessages": [Function],
                        "updateWarningMessage": [Function],
                        "updateWarningMessages": [Function],
                      }
                    }
                    component="select"
                    fieldArrayContext={Object {}}
                    formContext={
                      Object {
                        "destroyOnUnmount": true,
                        "form": "simple",
                        "updateValidateAndWarningMap": [Function],
                      }
                    }
                    name="favoriteColor"
                  >
                    <select
                      name="favoriteColor"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                    >
                      <option />
                      <option
                        value="ff0000"
                      >
                        Red
                      </option>
                      <option
                        value="00ff00"
                      >
                        Green
                      </option>
                      <option
                        value="0000ff"
                      >
                        Blue
                      </option>
                    </select>
                  </Field>
                </ConnectFunction>
              </FieldWithContext>
            </div>
          </div>
          <div>
            <label
              htmlFor="employed"
            >
              Employed
            </label>
            <div>
              <FieldWithContext
                component="input"
                id="employed"
                name="employed"
                type="checkbox"
              >
                <ConnectFunction
                  component="input"
                  formContext={
                    Object {
                      "destroyOnUnmount": true,
                      "form": "simple",
                      "updateValidateAndWarningMap": [Function],
                    }
                  }
                  id="employed"
                  name="employed"
                  type="checkbox"
                >
                  <Field
                    actions={
                      Object {
                        "arrayPush": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "changeSubmitted": [Function],
                        "focus": [Function],
                        "registerField": [Function],
                        "registerForm": [Function],
                        "removeField": [Function],
                        "updateErrorAndWarningMessages": [Function],
                        "updateFormState": [Function],
                        "updateValidateMessage": [Function],
                        "updateValidateMessages": [Function],
                        "updateWarningMessage": [Function],
                        "updateWarningMessages": [Function],
                      }
                    }
                    component="input"
                    fieldArrayContext={Object {}}
                    formContext={
                      Object {
                        "destroyOnUnmount": true,
                        "form": "simple",
                        "updateValidateAndWarningMap": [Function],
                      }
                    }
                    id="employed"
                    name="employed"
                    type="checkbox"
                  >
                    <input
                      id="employed"
                      name="employed"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      type="checkbox"
                    />
                  </Field>
                </ConnectFunction>
              </FieldWithContext>
            </div>
          </div>
          <div>
            <label>
              Notes
            </label>
            <div>
              <FieldWithContext
                component="textarea"
                name="notes"
              >
                <ConnectFunction
                  component="textarea"
                  formContext={
                    Object {
                      "destroyOnUnmount": true,
                      "form": "simple",
                      "updateValidateAndWarningMap": [Function],
                    }
                  }
                  name="notes"
                >
                  <Field
                    actions={
                      Object {
                        "arrayPush": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "changeSubmitted": [Function],
                        "focus": [Function],
                        "registerField": [Function],
                        "registerForm": [Function],
                        "removeField": [Function],
                        "updateErrorAndWarningMessages": [Function],
                        "updateFormState": [Function],
                        "updateValidateMessage": [Function],
                        "updateValidateMessages": [Function],
                        "updateWarningMessage": [Function],
                        "updateWarningMessages": [Function],
                      }
                    }
                    component="textarea"
                    fieldArrayContext={Object {}}
                    formContext={
                      Object {
                        "destroyOnUnmount": true,
                        "form": "simple",
                        "updateValidateAndWarningMap": [Function],
                      }
                    }
                    name="notes"
                  >
                    <textarea
                      name="notes"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                    />
                  </Field>
                </ConnectFunction>
              </FieldWithContext>
            </div>
          </div>
          <div>
            <button
              type="submit"
            >
              Submit
            </button>
            <button
              type="button"
            >
              Clear Values
            </button>
          </div>
        </form>
      </SimpleForm>
    </ReduxForm>
  </ConnectFunction>
</Provider>
`;

exports[`<UnmountForm /> Blur field: actions history 1`] = `
"@@react-redux-form-lite/BLUR
 meta: {form: 'simple', field: 'firstName'}"
`;

exports[`<UnmountForm /> Blur field: store 1`] = `
Object {
  "form": Object {
    "activeField": "",
    "blurred": true,
    "changed": true,
    "errorsMap": Object {},
    "focused": true,
    "hasErrors": false,
    "hasWarnings": false,
    "submitted": false,
    "warningsMap": Object {},
  },
  "meta": Object {
    "email": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "employed": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "favoriteColor": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "firstName": Object {
      "active": false,
      "blurred": true,
      "changed": true,
      "error": "",
      "focused": true,
      "warning": "",
    },
    "lastName": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "notes": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "sex": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
  },
  "values": Object {
    "email": undefined,
    "employed": undefined,
    "favoriteColor": undefined,
    "firstName": "test",
    "lastName": undefined,
    "notes": undefined,
    "sex": undefined,
  },
}
`;

exports[`<UnmountForm /> Change field: actions history. 1`] = `
"@@react-redux-form-lite/CHANGE
 meta: {form: 'simple', field: 'firstName'}
 payload: {value: 't'},
@@react-redux-form-lite/CHANGE
 meta: {form: 'simple', field: 'firstName'}
 payload: {value: 'te'},
@@react-redux-form-lite/CHANGE
 meta: {form: 'simple', field: 'firstName'}
 payload: {value: 'tes'},
@@react-redux-form-lite/CHANGE
 meta: {form: 'simple', field: 'firstName'}
 payload: {value: 'test'}"
`;

exports[`<UnmountForm /> Changed field: store 1`] = `
Object {
  "form": Object {
    "activeField": "firstName",
    "blurred": false,
    "changed": true,
    "errorsMap": Object {},
    "focused": true,
    "hasErrors": false,
    "hasWarnings": false,
    "submitted": false,
    "warningsMap": Object {},
  },
  "meta": Object {
    "email": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "employed": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "favoriteColor": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "firstName": Object {
      "active": true,
      "blurred": false,
      "changed": true,
      "error": "",
      "focused": true,
      "warning": "",
    },
    "lastName": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "notes": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "sex": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
  },
  "values": Object {
    "email": undefined,
    "employed": undefined,
    "favoriteColor": undefined,
    "firstName": "test",
    "lastName": undefined,
    "notes": undefined,
    "sex": undefined,
  },
}
`;

exports[`<UnmountForm /> Focus field: actions history. 1`] = `
Array [
  Object {
    "meta": Object {
      "field": "firstName",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/FOCUS",
  },
]
`;

exports[`<UnmountForm /> Focus field: store 1`] = `
Object {
  "form": Object {
    "activeField": "firstName",
    "blurred": false,
    "changed": false,
    "errorsMap": Object {},
    "focused": true,
    "hasErrors": false,
    "hasWarnings": false,
    "submitted": false,
    "warningsMap": Object {},
  },
  "meta": Object {
    "email": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "employed": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "favoriteColor": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "firstName": Object {
      "active": true,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": true,
      "warning": "",
    },
    "lastName": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "notes": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "sex": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
  },
  "values": Object {
    "email": undefined,
    "employed": undefined,
    "favoriteColor": undefined,
    "firstName": undefined,
    "lastName": undefined,
    "notes": undefined,
    "sex": undefined,
  },
}
`;

exports[`<UnmountForm /> Register form and fields: action history. 1`] = `
Array [
  Object {
    "meta": Object {
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FORM",
  },
  Object {
    "meta": Object {
      "field": "firstName",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FIELD",
  },
  Object {
    "meta": Object {
      "field": "lastName",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FIELD",
  },
  Object {
    "meta": Object {
      "field": "email",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FIELD",
  },
  Object {
    "meta": Object {
      "field": "sex",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FIELD",
  },
  Object {
    "meta": Object {
      "field": "sex",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FIELD",
  },
  Object {
    "meta": Object {
      "field": "favoriteColor",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FIELD",
  },
  Object {
    "meta": Object {
      "field": "employed",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FIELD",
  },
  Object {
    "meta": Object {
      "field": "notes",
      "form": "simple",
    },
    "type": "@@react-redux-form-lite/REGISTER_FIELD",
  },
]
`;

exports[`<UnmountForm /> Register form and fields: store. 1`] = `
Object {
  "form": Object {
    "activeField": "",
    "blurred": false,
    "changed": false,
    "errorsMap": Object {},
    "focused": false,
    "hasErrors": false,
    "hasWarnings": false,
    "submitted": false,
    "warningsMap": Object {},
  },
  "meta": Object {
    "email": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "employed": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "favoriteColor": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "firstName": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "lastName": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "notes": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
    "sex": Object {
      "active": false,
      "blurred": false,
      "changed": false,
      "error": "",
      "focused": false,
      "warning": "",
    },
  },
  "values": Object {
    "email": undefined,
    "employed": undefined,
    "favoriteColor": undefined,
    "firstName": undefined,
    "lastName": undefined,
    "notes": undefined,
    "sex": undefined,
  },
}
`;

exports[`<UnmountForm /> Render simple form. 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <ConnectFunction>
    <ReduxForm
      actions={
        Object {
          "arrayPush": [Function],
          "blur": [Function],
          "change": [Function],
          "changeSubmitted": [Function],
          "focus": [Function],
          "registerField": [Function],
          "registerForm": [Function],
          "removeField": [Function],
          "updateErrorAndWarningMessages": [Function],
          "updateFormState": [Function],
          "updateValidateMessage": [Function],
          "updateValidateMessages": [Function],
          "updateWarningMessage": [Function],
          "updateWarningMessages": [Function],
        }
      }
      form={
        Object {
          "form": Object {
            "activeField": "",
            "blurred": false,
            "changed": false,
            "errorsMap": Object {},
            "focused": false,
            "hasErrors": false,
            "hasWarnings": false,
            "submitted": false,
            "warningsMap": Object {},
          },
          "meta": Object {
            "email": Object {
              "active": false,
              "blurred": false,
              "changed": false,
              "error": "",
              "focused": false,
              "warning": "",
            },
            "employed": Object {
              "active": false,
              "blurred": false,
              "changed": false,
              "error": "",
              "focused": false,
              "warning": "",
            },
            "favoriteColor": Object {
              "active": false,
              "blurred": false,
              "changed": false,
              "error": "",
              "focused": false,
              "warning": "",
            },
            "firstName": Object {
              "active": false,
              "blurred": false,
              "changed": false,
              "error": "",
              "focused": false,
              "warning": "",
            },
            "lastName": Object {
              "active": false,
              "blurred": false,
              "changed": false,
              "error": "",
              "focused": false,
              "warning": "",
            },
            "notes": Object {
              "active": false,
              "blurred": false,
              "changed": false,
              "error": "",
              "focused": false,
              "warning": "",
            },
            "sex": Object {
              "active": false,
              "blurred": false,
              "changed": false,
              "error": "",
              "focused": false,
              "warning": "",
            },
          },
          "values": Object {
            "email": undefined,
            "employed": undefined,
            "favoriteColor": undefined,
            "firstName": undefined,
            "lastName": undefined,
            "notes": undefined,
            "sex": undefined,
          },
        }
      }
      ownProps={Object {}}
    >
      <UnmountForm
        form={
          Object {
            "form": Object {
              "activeField": "",
              "blurred": false,
              "changed": false,
              "errorsMap": Object {},
              "focused": false,
              "hasErrors": false,
              "hasWarnings": false,
              "submitted": false,
              "warningsMap": Object {},
            },
            "meta": Object {
              "email": Object {
                "active": false,
                "blurred": false,
                "changed": false,
                "error": "",
                "focused": false,
                "warning": "",
              },
              "employed": Object {
                "active": false,
                "blurred": false,
                "changed": false,
                "error": "",
                "focused": false,
                "warning": "",
              },
              "favoriteColor": Object {
                "active": false,
                "blurred": false,
                "changed": false,
                "error": "",
                "focused": false,
                "warning": "",
              },
              "firstName": Object {
                "active": false,
                "blurred": false,
                "changed": false,
                "error": "",
                "focused": false,
                "warning": "",
              },
              "lastName": Object {
                "active": false,
                "blurred": false,
                "changed": false,
                "error": "",
                "focused": false,
                "warning": "",
              },
              "notes": Object {
                "active": false,
                "blurred": false,
                "changed": false,
                "error": "",
                "focused": false,
                "warning": "",
              },
              "sex": Object {
                "active": false,
                "blurred": false,
                "changed": false,
                "error": "",
                "focused": false,
                "warning": "",
              },
            },
            "values": Object {
              "email": undefined,
              "employed": undefined,
              "favoriteColor": undefined,
              "firstName": undefined,
              "lastName": undefined,
              "notes": undefined,
              "sex": undefined,
            },
          }
        }
        formActions={
          Object {
            "arrayPush": [Function],
            "blur": [Function],
            "change": [Function],
            "changeSubmitted": [Function],
            "focus": [Function],
            "registerField": [Function],
            "registerForm": [Function],
            "removeField": [Function],
            "updateErrorAndWarningMessages": [Function],
            "updateFormState": [Function],
            "updateValidateMessage": [Function],
            "updateValidateMessages": [Function],
            "updateWarningMessage": [Function],
            "updateWarningMessages": [Function],
          }
        }
        formParams={
          Object {
            "destroyOnUnmount": true,
            "form": "simple",
          }
        }
        handleSubmit={[Function]}
      >
        <form
          onSubmit={[Function]}
        >
          <div>
            <label>
              First Name
            </label>
            <div>
              <FieldWithContext
                component="input"
                name="firstName"
                placeholder="First Name"
                type="text"
              >
                <ConnectFunction
                  component="input"
                  formContext={
                    Object {
                      "form": "simple",
                      "updateValidateAndWarningMap": [Function],
                    }
                  }
                  name="firstName"
                  placeholder="First Name"
                  type="text"
                >
                  <Field
                    actions={
                      Object {
                        "arrayPush": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "changeSubmitted": [Function],
                        "focus": [Function],
                        "registerField": [Function],
                        "registerForm": [Function],
                        "removeField": [Function],
                        "updateErrorAndWarningMessages": [Function],
                        "updateFormState": [Function],
                        "updateValidateMessage": [Function],
                        "updateValidateMessages": [Function],
                        "updateWarningMessage": [Function],
                        "updateWarningMessages": [Function],
                      }
                    }
                    component="input"
                    fieldArrayContext={Object {}}
                    formContext={
                      Object {
                        "form": "simple",
                        "updateValidateAndWarningMap": [Function],
                      }
                    }
                    name="firstName"
                    placeholder="First Name"
                    type="text"
                  >
                    <input
                      name="firstName"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="First Name"
                      type="text"
                    />
                  </Field>
                </ConnectFunction>
              </FieldWithContext>
            </div>
          </div>
          <div>
            <label>
              Last Name
            </label>
            <div>
              <FieldWithContext
                component="input"
                name="lastName"
                placeholder="Last Name"
                type="text"
              >
                <ConnectFunction
                  component="input"
                  formContext={
                    Object {
                      "form": "simple",
                      "updateValidateAndWarningMap": [Function],
                    }
                  }
                  name="lastName"
                  placeholder="Last Name"
                  type="text"
                >
                  <Field
                    actions={
                      Object {
                        "arrayPush": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "changeSubmitted": [Function],
                        "focus": [Function],
                        "registerField": [Function],
                        "registerForm": [Function],
                        "removeField": [Function],
                        "updateErrorAndWarningMessages": [Function],
                        "updateFormState": [Function],
                        "updateValidateMessage": [Function],
                        "updateValidateMessages": [Function],
                        "updateWarningMessage": [Function],
                        "updateWarningMessages": [Function],
                      }
                    }
                    component="input"
                    fieldArrayContext={Object {}}
                    formContext={
                      Object {
                        "form": "simple",
                        "updateValidateAndWarningMap": [Function],
                      }
                    }
                    name="lastName"
                    placeholder="Last Name"
                    type="text"
                  >
                    <input
                      name="lastName"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Last Name"
                      type="text"
                    />
                  </Field>
                </ConnectFunction>
              </FieldWithContext>
            </div>
          </div>
          <div>
            <label>
              Email
            </label>
            <div>
              <FieldWithContext
                component="input"
                name="email"
                placeholder="Email"
                type="email"
              >
                <ConnectFunction
                  component="input"
                  formContext={
                    Object {
                      "form": "simple",
                      "updateValidateAndWarningMap": [Function],
                    }
                  }
                  name="email"
                  placeholder="Email"
                  type="email"
                >
                  <Field
                    actions={
                      Object {
                        "arrayPush": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "changeSubmitted": [Function],
                        "focus": [Function],
                        "registerField": [Function],
                        "registerForm": [Function],
                        "removeField": [Function],
                        "updateErrorAndWarningMessages": [Function],
                        "updateFormState": [Function],
                        "updateValidateMessage": [Function],
                        "updateValidateMessages": [Function],
                        "updateWarningMessage": [Function],
                        "updateWarningMessages": [Function],
                      }
                    }
                    component="input"
                    fieldArrayContext={Object {}}
                    formContext={
                      Object {
                        "form": "simple",
                        "updateValidateAndWarningMap": [Function],
                      }
                    }
                    name="email"
                    placeholder="Email"
                    type="email"
                  >
                    <input
                      name="email"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      placeholder="Email"
                      type="email"
                    />
                  </Field>
                </ConnectFunction>
              </FieldWithContext>
            </div>
          </div>
          <div>
            <label>
              Sex
            </label>
            <div>
              <label>
                <FieldWithContext
                  component="input"
                  name="sex"
                  type="radio"
                  value="male"
                >
                  <ConnectFunction
                    component="input"
                    formContext={
                      Object {
                        "form": "simple",
                        "updateValidateAndWarningMap": [Function],
                      }
                    }
                    name="sex"
                    type="radio"
                    value="male"
                  >
                    <Field
                      actions={
                        Object {
                          "arrayPush": [Function],
                          "blur": [Function],
                          "change": [Function],
                          "changeSubmitted": [Function],
                          "focus": [Function],
                          "registerField": [Function],
                          "registerForm": [Function],
                          "removeField": [Function],
                          "updateErrorAndWarningMessages": [Function],
                          "updateFormState": [Function],
                          "updateValidateMessage": [Function],
                          "updateValidateMessages": [Function],
                          "updateWarningMessage": [Function],
                          "updateWarningMessages": [Function],
                        }
                      }
                      component="input"
                      fieldArrayContext={Object {}}
                      formContext={
                        Object {
                          "form": "simple",
                          "updateValidateAndWarningMap": [Function],
                        }
                      }
                      name="sex"
                      type="radio"
                      value="male"
                    >
                      <input
                        name="sex"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        type="radio"
                        value="male"
                      />
                    </Field>
                  </ConnectFunction>
                </FieldWithContext>
                 Male
              </label>
              <label>
                <FieldWithContext
                  component="input"
                  name="sex"
                  type="radio"
                  value="female"
                >
                  <ConnectFunction
                    component="input"
                    formContext={
                      Object {
                        "form": "simple",
                        "updateValidateAndWarningMap": [Function],
                      }
                    }
                    name="sex"
                    type="radio"
                    value="female"
                  >
                    <Field
                      actions={
                        Object {
                          "arrayPush": [Function],
                          "blur": [Function],
                          "change": [Function],
                          "changeSubmitted": [Function],
                          "focus": [Function],
                          "registerField": [Function],
                          "registerForm": [Function],
                          "removeField": [Function],
                          "updateErrorAndWarningMessages": [Function],
                          "updateFormState": [Function],
                          "updateValidateMessage": [Function],
                          "updateValidateMessages": [Function],
                          "updateWarningMessage": [Function],
                          "updateWarningMessages": [Function],
                        }
                      }
                      component="input"
                      fieldArrayContext={Object {}}
                      formContext={
                        Object {
                          "form": "simple",
                          "updateValidateAndWarningMap": [Function],
                        }
                      }
                      name="sex"
                      type="radio"
                      value="female"
                    >
                      <input
                        name="sex"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        type="radio"
                        value="female"
                      />
                    </Field>
                  </ConnectFunction>
                </FieldWithContext>
                 Female
              </label>
            </div>
          </div>
          <div>
            <label>
              Favorite Color
            </label>
            <div>
              <FieldWithContext
                component="select"
                name="favoriteColor"
              >
                <ConnectFunction
                  component="select"
                  formContext={
                    Object {
                      "form": "simple",
                      "updateValidateAndWarningMap": [Function],
                    }
                  }
                  name="favoriteColor"
                >
                  <Field
                    actions={
                      Object {
                        "arrayPush": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "changeSubmitted": [Function],
                        "focus": [Function],
                        "registerField": [Function],
                        "registerForm": [Function],
                        "removeField": [Function],
                        "updateErrorAndWarningMessages": [Function],
                        "updateFormState": [Function],
                        "updateValidateMessage": [Function],
                        "updateValidateMessages": [Function],
                        "updateWarningMessage": [Function],
                        "updateWarningMessages": [Function],
                      }
                    }
                    component="select"
                    fieldArrayContext={Object {}}
                    formContext={
                      Object {
                        "form": "simple",
                        "updateValidateAndWarningMap": [Function],
                      }
                    }
                    name="favoriteColor"
                  >
                    <select
                      name="favoriteColor"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                    >
                      <option />
                      <option
                        value="ff0000"
                      >
                        Red
                      </option>
                      <option
                        value="00ff00"
                      >
                        Green
                      </option>
                      <option
                        value="0000ff"
                      >
                        Blue
                      </option>
                    </select>
                  </Field>
                </ConnectFunction>
              </FieldWithContext>
            </div>
          </div>
          <div>
            <label
              htmlFor="employed"
            >
              Employed
            </label>
            <div>
              <FieldWithContext
                component="input"
                id="employed"
                name="employed"
                type="checkbox"
              >
                <ConnectFunction
                  component="input"
                  formContext={
                    Object {
                      "form": "simple",
                      "updateValidateAndWarningMap": [Function],
                    }
                  }
                  id="employed"
                  name="employed"
                  type="checkbox"
                >
                  <Field
                    actions={
                      Object {
                        "arrayPush": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "changeSubmitted": [Function],
                        "focus": [Function],
                        "registerField": [Function],
                        "registerForm": [Function],
                        "removeField": [Function],
                        "updateErrorAndWarningMessages": [Function],
                        "updateFormState": [Function],
                        "updateValidateMessage": [Function],
                        "updateValidateMessages": [Function],
                        "updateWarningMessage": [Function],
                        "updateWarningMessages": [Function],
                      }
                    }
                    component="input"
                    fieldArrayContext={Object {}}
                    formContext={
                      Object {
                        "form": "simple",
                        "updateValidateAndWarningMap": [Function],
                      }
                    }
                    id="employed"
                    name="employed"
                    type="checkbox"
                  >
                    <input
                      id="employed"
                      name="employed"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      type="checkbox"
                    />
                  </Field>
                </ConnectFunction>
              </FieldWithContext>
            </div>
          </div>
          <div>
            <label>
              Notes
            </label>
            <div>
              <FieldWithContext
                component="textarea"
                name="notes"
              >
                <ConnectFunction
                  component="textarea"
                  formContext={
                    Object {
                      "form": "simple",
                      "updateValidateAndWarningMap": [Function],
                    }
                  }
                  name="notes"
                >
                  <Field
                    actions={
                      Object {
                        "arrayPush": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "changeSubmitted": [Function],
                        "focus": [Function],
                        "registerField": [Function],
                        "registerForm": [Function],
                        "removeField": [Function],
                        "updateErrorAndWarningMessages": [Function],
                        "updateFormState": [Function],
                        "updateValidateMessage": [Function],
                        "updateValidateMessages": [Function],
                        "updateWarningMessage": [Function],
                        "updateWarningMessages": [Function],
                      }
                    }
                    component="textarea"
                    fieldArrayContext={Object {}}
                    formContext={
                      Object {
                        "form": "simple",
                        "updateValidateAndWarningMap": [Function],
                      }
                    }
                    name="notes"
                  >
                    <textarea
                      name="notes"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                    />
                  </Field>
                </ConnectFunction>
              </FieldWithContext>
            </div>
          </div>
          <div>
            <button
              type="submit"
            >
              Submit
            </button>
            <button
              type="button"
            >
              Clear Values
            </button>
          </div>
        </form>
      </UnmountForm>
    </ReduxForm>
  </ConnectFunction>
</Provider>
`;
